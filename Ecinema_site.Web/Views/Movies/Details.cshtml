@model dynamic
@{
    ViewBag.Title = "Movie Details";
    
    // Get the ID from the route or default to 1
    int id = 1;
    try {
        if (ViewContext.RouteData.Values["id"] != null) {
            id = Convert.ToInt32(ViewContext.RouteData.Values["id"]);
        }
    } catch { /* Use default id */ }

    // Map of movie titles based on ID
    var movieTitles = new Dictionary<int, string>
    {
        { 1, "Alien" },
        { 2, "Fight Club" },
        { 3, "The Goonies" },
        { 4, "The Shawshank Redemption" },
        { 5, "Interstellar" }
    };

    // Map of movie descriptions based on ID
    var movieDescriptions = new Dictionary<int, string>
    {
        { 1, "In deep space, the crew of the commercial starship Nostromo is awakened from their cryo-sleep capsules halfway through their journey home to investigate a distress call from an alien vessel." },
        { 2, "An insomniac office worker and a devil-may-care soap maker form an underground fight club that evolves into much more." },
        { 3, "A group of young misfits called The Goonies discover an ancient map and set out on an adventure to find a legendary pirate's long-lost treasure." },
        { 4, "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency." },
        { 5, "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival." }
    };

    // Map of movie genres based on ID
    var movieGenres = new Dictionary<int, string>
    {
        { 1, "Action, Adventure, Horror" },
        { 2, "Drama, Thriller" },
        { 3, "Adventure, Comedy" },
        { 4, "Drama" },
        { 5, "Adventure, Drama, Sci-Fi" }
    };

    // Map of movie years based on ID
    var movieYears = new Dictionary<int, int>
    {
        { 1, 1979 },
        { 2, 1999 },
        { 3, 1985 },
        { 4, 1994 },
        { 5, 2014 }
    };

    // Map of movie ratings based on ID
    var movieRatings = new Dictionary<int, double>
    {
        { 1, 4.5 },
        { 2, 4.7 },
        { 3, 4.8 },
        { 4, 4.9 },
        { 5, 4.6 }
    };
    
    // Get movie properties
    string title = movieTitles.ContainsKey(id) ? movieTitles[id] : "Movie Title";
    string description = movieDescriptions.ContainsKey(id) ? movieDescriptions[id] : "No description available.";
    string genre = movieGenres.ContainsKey(id) ? movieGenres[id] : "Not specified";
    int year = movieYears.ContainsKey(id) ? movieYears[id] : 0;
    double rating = movieRatings.ContainsKey(id) ? movieRatings[id] : 0.0;
    string imagePath = $"~/Content/Images/Movies/Movie_poster_{id}.png";
    string videoPath = "~/Content/Videos/sample.mp4";
    
    ViewBag.Title = title;
    
    // Get two related movies different from the current
    var relatedIds = new List<int>();
    for (int i = 1; i <= 5; i++) {
        if (i != id) {
            relatedIds.Add(i);
        }
    }
    // Take only the first two
    relatedIds = relatedIds.Take(2).ToList();
}

<div class="container py-3">
    <div class="row g-3 mb-4">
        <div class="col-lg-8">
            <!-- Video Player Box -->
            <div class="card shadow-sm">
                <div class="card-body p-2">
                    <div class="ratio ratio-16x9">
                        <video controls class="rounded">
                            <source src="@Url.Content(videoPath)" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                </div>
            </div>
            
            <!-- Movie Title and Meta Information -->
            <div class="card mt-3 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h4 class="mb-0">@title</h4>
                        <span class="badge bg-primary">@rating/5</span>
                    </div>
                    
                    <div class="mb-3">
                        <span class="badge bg-secondary me-2">@year</span>
                        <span class="text-muted">@genre</span>
                    </div>
                    
                    <!-- Movie Description -->
                    <h5>Synopsis</h5>
                    <p class="card-text">@description</p>
                </div>
            </div>
            
            <!-- User Reviews Section (Placeholder) -->
            <div class="card mt-3 shadow-sm">
                <div class="card-header py-2 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">User Reviews</h5>
                    <button class="btn btn-sm btn-outline-primary">Write a Review</button>
                </div>
                <div class="card-body">
                    <p class="text-muted small">No reviews yet. Be the first to review this movie!</p>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <!-- Movie Poster -->
            <div class="card shadow-sm">
                <img src="@Url.Content(imagePath)" class="card-img-top" alt="@title">
                <div class="card-body p-2">
                    <div class="d-grid gap-2">
                        <button class="btn btn-sm btn-primary">
                            <i class="bi bi-download"></i> Download
                        </button>
                        <button class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-share"></i> Share
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Related Movies Section -->
            <div class="card mt-3 shadow-sm">
                <div class="card-header py-2">
                    <h5 class="mb-0">You May Also Like</h5>
                </div>
                <div class="list-group list-group-flush">
                    @foreach (var relatedId in relatedIds)
                    {
                        string relatedTitle = movieTitles.ContainsKey(relatedId) ? movieTitles[relatedId] : "Movie Title";
                        string relatedGenre = movieGenres.ContainsKey(relatedId) ? movieGenres[relatedId] : "Not specified";
                        string relatedImagePath = $"~/Content/Images/Movies/Movie_poster_{relatedId}.png";
                        
                        <a href="@Url.Action("Details", "Movies", new { id = relatedId })" class="list-group-item list-group-item-action p-2">
                            <div class="d-flex align-items-center">
                                <div class="me-2" style="width: 50px; height: 75px; overflow: hidden;">
                                    <img src="@Url.Content(relatedImagePath)" 
                                         class="img-fluid" style="object-fit: cover; height: 100%;" alt="@relatedTitle">
                                </div>
                                <div>
                                    <h6 class="mb-0 small">@relatedTitle</h6>
                                    <small class="text-muted">@relatedGenre</small>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="mb-3">
        <a href="@Url.Action("Index", "Movies")" class="btn btn-sm btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to Movies
        </a>
    </div>
</div> 